!<arch>
0-isupper.c/    0           0     0     644     215       `
#include "main.h"

/**
 * _isupper - checks for upper case character
 * @c: the character to be checked
 *
 * Return: 1 if c is uppercase, 0 if otherwise
 */

int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     0           0     0     644     332       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 *
 * @s: memory area to be filled
 * @b: char to copy
 * @n: number of times to copy b
 *
 * Return: pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     374       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 *
 * @dest: string to append to
 *
 * @src: string to add
 *
 * Return: a pointer to the resulting string
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     599       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 *
 * @s: string to be converted
 *
 * Return: the integer converted from the string
 */

int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}
	if (f == 0)
		return (0);
	return (n);
}

1-isdigit.c/    0           0     0     644     205       `
#include "main.h"

/**
 * _isdigit - checks for digits between 0 and 9
 * @c: int to be checked
 *
 * Return: 1 if c is a digit, 0 if otherwise
 */

int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     340       `
#include "main.h"

/**
 * *_memcpy - copies memory area
 * @dest: destination memory area
 * @src: memory area to copy from
 * @n: number of bytes to copy
 *
 * Return: pointer to destination
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     461       `
#include "main.h"

/**
 * _strncat - concatenates n-bytes of strings to another
 *
 * @dest: destination string
 * @src: source string
 * @n: number of bytes of strings to concatenate
 *
 * Return: a pointer to the resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;

	while (src[j] != '\0' && j < n)
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     424       `
#include <stdio.h>
#include "main.h"

/**
 * *_strchr - locates a character in the string
 * @s: the string to search
 * @c: the character to find
 *
 * Return: a pointer to the occurence of the character
 * c in the string s, or null if the character is not found
 */

char *_strchr(char *s, char c)
{
	int a;

	while (1)
	{
		a = *s++;
		if (a == c)
		{
			return (s - 1);
		}
		if (a == 0)
		{
			return (NULL);
		}
	}
}
2-strlen.c/     0           0     0     644     238       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 *
 * @s: the b=string to evaluate
 *
 * Return: the length of the string
 */

int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     386       `
#include "main.h"

/**
 * _strncpy - copies a string
 *
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy
 *
 * Return: pointer to the resulting string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     213       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 *
 * @c: the character to check
 *
 * Return: 1 if c is lowercase, 0 if otherwise
 */


int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     221       `
#include "main.h"


/**
 * _puts - prints a string to stdout
 *
 * @str: pointer to the string to print
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     376       `
#include "main.h"

/**
 * _strcmp - compares two strings
 *
 * @s1: first string to compare
 * @s2: second string to compare
 *
 * Return: less than 0 if s1 is less than s2,
 * 0 if they are equal
 * nmpre than 0 if s1 is greater than s2
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 == *s2)
	{
		if (*s1 == '\0')
			return (0);
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     573       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: the string to evaluate
 * @accept: the string containing the list of characters to match in s
 *
 * Return: the number of bytes in the initial segment
 * of s which consists only of bytes from accept
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, f, j, flag;

	f = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				f++;
				flag = 1;
			}
		}
		if (flag == 0)
		{
			return (f);
		}
	}

	return (0);
}

4-isalpha.c/    0           0     0     644     238       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 *
 * @c: character to be checked
 *
 * Return: 1 if c is a letter, 0 otherwise
 */

int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     513       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - searches a string for any set of bytes
 *
 * @s: the string to search
 * @accept: the string containing the bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or NULL if no such bytes is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}

5-strstr.c/     0           0     0     644     526       `
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - locates a substring
 *
 * @haystack: the string to search in
 * @needle: the substring to look for
 *
 * Return: pointer to the beginning of the located substring
 * or NULL if the substring is not found
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}

		if (!needle[j])
			return (&haystack[i]);
	}

	return (NULL);
}
6-abs.c/        0           0     0     644     226       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 *
 * @n: the integer to check
 *
 *Return: the absolute value of the integer
 */


int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     458       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 *
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
		dest[i] = src[i];

	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     272       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes a character to the stdout
 *
 * @c: The character to be printed
 *
 * Return: On success 1
 * On error, -1 is returned, and errno is set appropriately
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
